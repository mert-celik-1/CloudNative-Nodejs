name: CI/CD Pipeline

on:
  push:
    branches: [ master ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: echo "No tests to run yet"

  build-and-push:
    name: Build & Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/cloudnative-example

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/cloudnative-example:latest
            ghcr.io/${{ github.repository_owner }}/cloudnative-example:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        
      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
          
      - name: Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      
      - name: Create directory on EC2
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "mkdir -p ~/compose-deployment"
          
      - name: Copy docker-compose.yml to EC2
        run: |
          scp ./docker-compose.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/compose-deployment/docker-compose.yml

      - name: SSH into EC2 and Deploy
        run: |
          REPO_OWNER="${{ github.repository_owner }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
            cd ~/compose-deployment
            
            # Replace repository owner variable in docker-compose.yml
            sed -i "s/\${GITHUB_REPOSITORY_OWNER:-username}/${REPO_OWNER}/g" docker-compose.yml
            
            echo "Logging into GHCR"
            echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "${REPO_OWNER}" --password-stdin
            
            echo "Pulling latest image"
            docker-compose pull
            
            echo "Recreating containers"
            docker-compose down && docker-compose up -d
            
            echo "Deployment complete"
          EOF
