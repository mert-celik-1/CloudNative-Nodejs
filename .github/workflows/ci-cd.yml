name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: echo "No tests to run yet"

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/cloudnative-example

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/cloudnative-example:latest
            ghcr.io/${{ github.repository_owner }}/cloudnative-example:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Print success message
        run: echo "Successfully built and pushed Docker image to GitHub Container Registry"

  deploy-to-ec2:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - uses: actions/checkout@v2
        
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
          
      - name: Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      
      - name: Check Docker and Docker Compose on EC2
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
            echo 'Checking Docker and Docker Compose versions:'
            docker --version
            docker-compose --version
            
            echo 'Stopping existing container if running:'
            docker stop cloudnative-app || true
            docker rm cloudnative-app || true
          "
          
      - name: Copy docker-compose.yml to EC2
        run: |
          scp docker-compose.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/docker-compose.yml
          echo "Successfully copied docker-compose.yml to EC2"
          
      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            
            # Create .env file if it doesn't exist
            if [ ! -f .env ]; then
              echo 'PORT=3000' > .env
              echo 'REDIS_URL=redis://redis:6379' >> .env
              echo 'Created .env file with required environment variables'
            fi
            
            # Pull the latest image explicitly
            docker pull ghcr.io/${{ github.repository_owner }}/cloudnative-example:latest
            
            echo 'Updating docker-compose.yml to use the latest image'
            # Update image in docker-compose.yml
            sed -i 's|build:|image: ghcr.io/${{ github.repository_owner }}/cloudnative-example:latest\\n    #build:|g' docker-compose.yml
            
            echo 'Current docker-compose.yml content:'
            cat docker-compose.yml
            
            echo 'Stopping any existing services'
            # Stop any existing services
            docker-compose down || true
            
            echo 'Starting services with Docker Compose'
            # Start services with Docker Compose
            docker-compose up -d
            
            echo 'Checking running containers:'
            docker ps
            
            # Clean up unused images
            docker image prune -f
          "